require 'yaml'
require 'rspec/core/rake_task'

require_relative 'app/main'

RSpec::Core::RakeTask.new(:spec) do |spec|
  spec.pattern = 'spec/**/*_spec.rb'
end

RSpec::Core::RakeTask.new(:coverage) do |spec|
  spec.pattern = 'spec/**/*_spec.rb'
end

task :run do
  exec("bundle exec thin start -p 9393 -D")
end

task :run_with_trace do
  exec("bundle exec thin start -p 9393 -V -D")
end

desc "Create a new user"
task :adduser, [:login, :space, :language] do |t, user|
  adduser(user)
end

def adduser(user)
  app = RoundTable::API.new

  if user.to_hash.length < 3
    abort "Please provide login, space and language arguments"
  end

  user_key = "auth_user_#{user[:login]}"

  if app.helpers.redis.exists(user_key)
    abort "User #{user[:login]} already exists"
  end

  puts "New password: "
  password = STDIN.noecho(&:gets).chomp

  user_json = {
    'password' => BCrypt::Password.create(password),
    'space' => user[:space],
    'language' => user[:language],
  }.to_json

  app.helpers.redis.set(user_key, user_json)
  puts "User created successfully"
end

desc "Delete a user by login"
task :deluser, [:login] do |t, user|
  app = RoundTable::API.new

  if !user.has_key?(:login)
    abort "Please specify login argument"
  end

  keys_num = app.helpers.redis.del("auth_user_#{user[:login]}")
  if keys_num > 0
    puts "User #{user[:login]} deleted successfully"
  else
    abort "User #{user[:login]} doesn't exist"
  end
end

task :default => :run
